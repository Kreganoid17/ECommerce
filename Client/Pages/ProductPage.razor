@page "/"
@page "/ProductPage"
@using ECommerceApp.Shared
@using ECommerceApp.Shared.DTO
@inject ECommerceApp.Client.Services.IProductsController Products
@inject ECommerceApp.Client.Services.ICartController Cart
@inject ISyncLocalStorageService LocalStorage
@inject IToastService ToastService
@inject NavigationManager NavMan
@inject HttpClient client


<link href = "css/CardStyle.css" rel = "stylesheet" >
<link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet" />
<link href="css/Loading.css" rel="stylesheet" />

<div class = "col-12">

    <div class = "row">

        <div class = " col-10 w-100 p-2 text-center">

            <BlazoredTypeahead SearchMethod="@SearchProduct" TValue = "Product" TItem= "Product" Value = "SelectedProduct" ValueChanged = "HandleSearch" ValueExpression = "(() => SelectedProduct)" placeholder = "Search...">

                <SelectedTemplate>

                    @context.ProductName

                </SelectedTemplate>
                <ResultTemplate>

                    @context.ProductName

                </ResultTemplate>
                <NotFoundTemplate>

                    Sorry this product doesn't exist.

                </NotFoundTemplate>

            </BlazoredTypeahead>

        </div>

    </div>

</div>

<br>

@if (Products.products == null)
{
    
    <div id="circle">
                <div class="loader">
                    <div class="loader">
                        <div class="loader">
                            <div class="loader">

                            </div>
                        </div>
                    </div>
                </div>
            </div>   

}else{

    


        <div class = "col-12">

            <div class = "row">

            @foreach(var product in Products.products)
            {
                <div class = "col-md-3 col-sm-6">

                    <div class="card mb-3">

                        @{string ImgSrc = "Content/Images/" + product.ProductName + ".jpg";}

                            <img src = "@ImgSrc" @onclick = "() => ShowDetails(product.ProductID)" id = "ProductImg">


                        <h1 style = "font-size:30px;" @onclick = "() => ShowDetails(product.ProductID)" id = "Product"> @product.ProductName</h1>
                        <p class="price">R @product.Price</p>

                        <AuthorizeView>

                            <Authorized>

                                @if(product.Quantity > 0){

                                    var cartitems = LocalStorage.GetItem<List<Product>>("cart");

                                    var Citem = cartitems.Find(x => x.ProductID == product.ProductID);


                                    if (Citem != null) {


                                            <div class = "w-100" id = "AddToCart">

                                                <div style = "top:50%;">

                                                    In Cart

                                                </div>

                                            </div>


                                        }else if(Citem == null)
                                        {
                                        
                                            <div class = "w-100" @onclick = "() => AddToCart(product)" id = "AddToCart">

                                                <div style = "top:50%;">

                                                    Add to Cart

                                                </div>

                                            </div>

                                        }

                                }else if(product.Quantity <= 0){
                                
                                    <div class = "w-100" id = "OutOfStock">

                                        <div style = "top:50%;">

                                            Out of Stock

                                        </div>

                                    </div>
                                
                                }


                            </Authorized>

                        </AuthorizeView>
                        

                    </div>
  
                </div>

            }

            </div>

        </div>

  
}

@code {

    private Product SelectedProduct;

    protected override async Task OnInitializedAsync()
    {
        await Products.GetProducts();


    }

    private void ShowDetails(int Id) {

        NavMan.NavigateTo($"/ProductDetails/{Id}");

    }

    private void AddToCart(Product product) {

        Cart.AddToCart(product);

        Cart.OnProductChange += StateHasChanged;

        InvokeAsync(StateHasChanged);

        ToastService.ShowSuccess(product.ProductName + " Has Been Added", "Added To Cart");

    }

        private void HandleSearch(Product product) {

        if (product == null) return;
        SelectedProduct = product;
        NavMan.NavigateTo($"/ProductDetails/{SelectedProduct.ProductID}");

    }

    private async Task<IEnumerable<Product>> SearchProduct(string searchtext)
    {

        var call = await Products.SearchProducts(searchtext);
        return call;

    }

}
